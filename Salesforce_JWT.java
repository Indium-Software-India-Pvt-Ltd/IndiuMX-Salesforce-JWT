// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package salesforce_jwt.actions;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.StringReader;
import java.security.KeyFactory;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.Signature;
import java.security.spec.PKCS8EncodedKeySpec;
import java.text.MessageFormat;
import org.apache.commons.codec.binary.Base64;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import java.util.Base64.*;

public class Salesforce_JWT extends CustomJavaAction<java.lang.String>
{
	private java.lang.String ClientID;
	private java.lang.String Username;
	private java.lang.String Aud;
	private java.lang.Long TimeInMilliSeconds;
	private IMendixObject __InputFile;
	private myfirstmodule.proxies.FileDoc InputFile;

	public Salesforce_JWT(IContext context, java.lang.String ClientID, java.lang.String Username, java.lang.String Aud, java.lang.Long TimeInMilliSeconds, IMendixObject InputFile)
	{
		super(context);
		this.ClientID = ClientID;
		this.Username = Username;
		this.Aud = Aud;
		this.TimeInMilliSeconds = TimeInMilliSeconds;
		this.__InputFile = InputFile;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		this.InputFile = this.__InputFile == null ? null : myfirstmodule.proxies.FileDoc.initialize(getContext(), __InputFile);

		// BEGIN USER CODE
		String header = "{\"alg\":\"RS256\",\"typ\":\"JWT\"}";
	    String claimTemplate = "'{'\"iss\": \"{0}\", \"sub\": \"{1}\", \"aud\": \"{2}\", \"exp\": \"{3}\"'}'";
	    StringBuffer token = new StringBuffer();
	    try {
	     

	      //Encode the JWT Header and add it to our string to sign
	      token.append(Base64.encodeBase64URLSafeString(header.getBytes("UTF-8")));
	      //Separate with a period
	      token.append(".");

	      //Create the JWT Claims Object
	      String[] claimArray = new String[5];
	      claimArray[0] = this.ClientID;
	      claimArray[1] = this.Username;
	      claimArray[2] = this.Aud;
	      claimArray[3] = Long.toString( ( System.currentTimeMillis()/1000 ) + this.TimeInMilliSeconds);
	      int JTI;
		  MessageFormat claims;
	      claims = new MessageFormat(claimTemplate);
	      String payload = claims.format(claimArray);
	      payload = payload.replaceAll("\"exp\": \"(\\d+)\"", "\"exp\": $1");
	      //Add the encoded claims object
	      token.append(Base64.encodeBase64URLSafeString(payload.getBytes("UTF-8")));
		  String path = Core.getConfiguration().getResourcesPath().toString();
	     
	      //Load the private key from a keystore
	      KeyStore keystore = KeyStore.getInstance("JKS");
	      keystore.load(new FileInputStream(path+"/takeda-keys/takedakeystore.jks"), "takeda".toCharArray());
	      PrivateKey privateKey = (PrivateKey) keystore.getKey("takeda", "takeda".toCharArray());
	

	      //Sign the JWT Header + "." + JWT Claims Object
	      Signature signature = Signature.getInstance("SHA256withRSA");
	      signature.initSign(privateKey);
	      signature.update(token.toString().getBytes("UTF-8"));
	      String  signedPayload = Base64.encodeBase64URLSafeString(signature.sign());
	      
	      //Separate with a period
	      token.append(".");

	      //Add the encoded signature
	      token.append(signedPayload);
	    } catch (Exception e) {
	    	Core.getLogger("Stack trace").error(e);
	        e.printStackTrace();
	    }
	    return token.toString();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Salesforce_JWT";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
